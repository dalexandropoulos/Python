# The code you've provided seems to be correct and doesn't contain any apparent errors. 
# It defines two functions: collatz_length(n) and collatz(n), and then proceeds to print 
# the results for each number from 1 to 10.

# The collatz_length(n) function calculates the length of the Collatz sequence for a given 
# number n using memoization. It utilizes the dictionary cld to store the previously calculated 
# lengths, starting with the base case of cld[1] = 1.

# The collatz(n) function generates the Collatz sequence for a given number n recursively.

# The code then iterates over the range from 1 to 10, printing the number i, the length of the 
# Collatz sequence calculated by collatz_length(i), and the Collatz sequence generated by collatz(i).


def collatz_length(n):
    length = 0
    starting_n = n
    while not n in cld:
        n = n//2 if n%2==0 else 3*n+1
        length += 1
    cld[starting_n] = length + cld[n]
    return length + cld[n]

def collatz(n):
    return [n] + collatz(int(n/2)) if n%2==0 else [n] + collatz(3*n+1) if n != 1 else [1]

# Collatz Length Dictionary
cld = {1: 1}  # Initialize the dictionary with base case for n=1


big_i = 0
bigger_length = 0

for i in range(1, 10**6 + 1):
    big_i = i if collatz_length(i) > bigger_length else big_i
    bigger_length = collatz_length(i) if collatz_length(i) > bigger_length else bigger_length

print(big_i, bigger_length)